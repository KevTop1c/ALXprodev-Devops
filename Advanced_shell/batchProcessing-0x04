#!/bin/bash

# Pokémon Parallel Data Retriever
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_BASE_URL="https://pokeapi.co/api/v2/pokemon/"

# Create pokemon_data directory
mkdir -p pokemon_data

# Function for parallel download
download_pokemon() {
    local pokemon=$1
    echo "[$pokemon] Starting download..."

    if curl -s --fail "${API_BASE_URL}/${pokemon}" > "pokemon_data/${pokemon}.json"; then
        echo "[$pokemon] Download completed! ✅"
    else
        echo "[$pokemon] Download failed ❌"
        rm -f "pokemon_data/${pokemon}.json"
    fi
}   

echo "Starting parallel downloads for ${#POKEMON_LIST[@]} Pokêmon..."
echo "=================================="

# Start all downloads in background
for pokemon in "${POKEMON_LIST[@]}"; do
    download_pokemon "$pokemon" &
    echo "[Monitor] Launched $pokemon"
done

# Process management using jobs and kill
echo ""
echo "[Monitor] Initial job status:"
jobs

active_jobs=$(jobs -p)
echo "[Monitor] Active job PIDs: $active_jobs"

# Monitor processes until all complete
while [ -n "$(jobs -p)" ]; do
    job_count=$(jobs -p | wc -w)
    echo "[Monitor] $job_count jobs still running..."
    
    # Check each job using kill -0
    for job_pid in $(jobs -p); do
        if kill -0 "$job_pid" 2>/dev/null; then
            echo "[Monitor] PID $job_pid still active"
        fi
    done
    
    sleep 2
    echo "[Monitor] Current jobs:"
    jobs
done

echo "[Monitor] All background processes completed!"
echo "================================"
echo "All parallel downloads completed! 🎉"